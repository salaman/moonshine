prog             -> classDeclList funcDefList program funcBody ;
classDecl        -> class id classInheritList classBody ;
classInheritList -> : id classInheritCont
classInheritList -> EPSILON
classInheritCont -> , id classInheritCont
classInheritCont -> EPSILON
classDeclList    -> classDecl classDeclList
classDeclList    -> EPSILON
classBody        -> { classProps }
classProps       -> classPropHead classPropTail
classProps       -> EPSILON
classPropHead    -> type id
classPropTail    -> ( fParams ) ; funcDeclList
classPropTail    -> arraySizeList ; classProps
funcDecl         -> type id ( fParams ) ;
funcDeclList     -> funcDecl funcDeclList
funcDeclList     -> EPSILON
funcHead         -> type id funcScope ( fParams )
funcScope        -> sr id
funcScope        -> EPSILON
funcDef          -> funcHead funcBody ;
funcDefList      -> funcDef funcDefList
funcDefList      -> EPSILON
funcBody         -> { funcBodyInner }
funcBodyInner    -> primitiveType varDeclTail funcBodyInner
funcBodyInner    -> construct funcBodyStat
funcBodyInner    -> variableHead funcBodyDecl
funcBodyInner    -> EPSILON
funcBodyStat     -> statementList
funcBodyDecl     -> @assignStat variableCont assignStatTail @3,2 ; funcBodyStat
funcBodyDecl     -> varDeclTail funcBodyInner
varDeclTail      -> variableHead arraySizeList ;
construct        -> @forStat for ( type id assignStatTail ; relExpr ; assignStat ) statBlock ;
construct        -> @ifStat if ( expr ) then statBlock else statBlock ; @4,1
construct        -> @getStat get ( variable ) ; @2,1
construct        -> @putStat put ( expr ) ; @2,1
construct        -> @returnStat return ( expr ) ; @2,1
statement        -> assignStat ;
statement        -> construct
statementList    -> statement @2,1 statementList
statementList    -> EPSILON
assignStat       -> @assignStat variable assignStatTail @3,1
assignStatTail   -> assignOp expr
statBlock        -> @statBlock { statementList }
statBlock        -> @statBlock statement @2,1
statBlock        -> @statBlock EPSILON
expr             -> arithExpr exprTail
exprTail         -> relOp arithExpr @2,1
exprTail         -> EPSILON
relExpr          -> arithExpr relOp arithExpr
arithExpr        -> arithExprHead arithExprTail
arithExprHead    -> term
arithExprTail    -> addOp term @3,2 arithExprTail
arithExprTail    -> EPSILON
sign             -> @sign +
sign             -> @sign -
term             -> factor termNR
termNR           -> multOp factor @3,2 termNR
termNR           -> EPSILON
factor           -> ( arithExpr )
factor           -> @num floatNum
factor           -> @num intNum
factor           -> @not not factor @2,1
factor           -> varOrFunc
factor           -> sign factor @2,1
varOrFunc        -> variableHead varOrFuncEval varOrFuncInner
varOrFuncEval    -> variableTail
varOrFuncEval    -> functionCallTail
varOrFuncInner   -> . varOrFunc
varOrFuncInner   -> EPSILON
variable         -> variableHead variableCont
variableHead     -> @id id
variableCont     -> variableTail variableCont2
variableCont     -> functionCallTail variableTrap
variableCont2    -> . variableHead variableCont
variableCont2    -> EPSILON
variableTrap     -> . variableHead variableCont
variableTail     -> indiceList
functionCallTail -> ( aParams )
indice           -> [ arithExpr ]
indiceList       -> indice indiceList
indiceList       -> EPSILON
arraySize        -> [ intNum ]
arraySizeList    -> arraySize arraySizeList
arraySizeList    -> EPSILON
type             -> id
type             -> primitiveType
primitiveType    -> float
primitiveType    -> int
fParams          -> type id arraySizeList fParamsTailList
fParams          -> EPSILON
aParams          -> expr aParamsTailList
aParams          -> EPSILON
fParamsTail      -> , type id arraySizeList
fParamsTailList  -> fParamsTail fParamsTailList
fParamsTailList  -> EPSILON
aParamsTail      -> , expr
aParamsTailList  -> aParamsTail aParamsTailList
aParamsTailList  -> EPSILON
assignOp         -> =
relOp            -> @relOp eq
relOp            -> @relOp geq
relOp            -> @relOp gt
relOp            -> @relOp leq
relOp            -> @relOp lt
relOp            -> @relOp neq
addOp            -> @addOp +
addOp            -> @addOp -
addOp            -> @addOp or
multOp           -> @multOp *
multOp           -> @multOp /
multOp           -> @multOp and
